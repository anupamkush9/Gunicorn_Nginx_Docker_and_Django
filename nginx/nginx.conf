upstream django_app {
    server web:8000;
}

server {
    listen 80;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    client_max_body_size 20M;  # Set the maximum body size to 20 megabytes

    location /static/ {
        alias /vol/static/;
    }
    
    location /media/ {
        alias /vol/media/;
    }
    
    location / {
        proxy_pass http://django_app;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
    }
}

# The upstream directive allows you to define a group of servers that can handle the incoming requests.
# Here, django_app is the name given to the upstream server group
# The proxy_pass directive inside the location / block uses the django_app upstream server to proxy the requests to the Django application server. 
# This way, Nginx acts as a reverse proxy, forwarding requests from clients to the Django application server.
# By using the upstream server group, you can easily scale your Django application by adding more servers to the upstream group. Nginx will then distribute the requests among the available servers.